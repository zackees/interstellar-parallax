The following text is a Git repository with code. The structure of the text are sections that begin with ----!@#$----, followed by a single line containing the file path and file name, followed by a variable amount of lines containing the file contents. The text representing the Git repository ends when the symbols --END-- are encounted. Any further text beyond --END-- are meant to be interpreted as instructions using the aforementioned Git repository as context.
----!@#$----
index.html
<!DOCTYPE html>
<html>

<head>
    <title>Interstellar Blends</title>
    <link rel="stylesheet" href="index.css">
</head>
<body>
    <div id="page-content">
        <div id="parallax">
            <div id="parallax-text"></div>
            <div id="parallax-hero"></div>
            <div id="parallax-triangle"></div>
            <div id="parallax-background"></div>
        </div>
    </div>
    <div style="padding-bottom: 400px;"></div>
    <script src="index.js"></script>
</body>

</html>

----!@#$----
index.js
(function () {
    const elems = [
        document.querySelector("#parallax-text"),
        document.querySelector("#parallax-hero"),
        document.querySelector("#parallax-triangle"),
        document.querySelector("#parallax-background")
    ];

    let depthFactors = [0.001, 0.1, 0.18, .3];
    const bias = -15.0;
    depthFactors = depthFactors.map(factor => factor * bias);

    function calculateDepth(x, y) {
        let _w = window.innerWidth / 2;
        let _h = window.innerHeight / 2;
        let depths = depthFactors.map(factor => `${50 - (x - _w) * 0.0}% ${50 - (y - _h) * factor}%`);
        // Reverse the depths array to maintain the original order
        return depths.reverse();
    }

    function easeInOutCubic(t) {
        return t < 0.5 ? 4 * t * t * t : 1 - Math.pow(-2 * t + 2, 3) / 2;
    }

    let x = window.innerWidth / 2; // default x to the center of the screen
    let y = 0; // start y at 0
    let startTime = performance.now(); // start time

    // Maximum movement should be a percentage of window's height
    const maxMovement = window.innerHeight * 0.5;

    function animate(time) {
        let timeFraction = (time - startTime) / 1000; // calculate the fraction of time that has passed
        if (timeFraction > 1) timeFraction = 1;

        let newY = maxMovement * easeInOutCubic(timeFraction); // apply the easing function to the time fraction
        let backgroundPositions = calculateDepth(x, newY);

        for (let i = 0; i < elems.length; i++) {
            let elem = elems[i];
            let backgroundPosition = backgroundPositions[i];
            console.log(x, newY, backgroundPosition);
            elem.style.backgroundPosition = backgroundPosition;
            elem.style.opacity = timeFraction; // change the opacity over time
        }

        if (timeFraction < 1) { // stop the animation after 1 second
            requestAnimationFrame(animate);
        }
    }

    // Start the animation
    requestAnimationFrame(animate);

})();

----!@#$----
index.css
body {
    margin: 0;
    background-color: #1d1e22;
    height: 100%;
    overflow-x: hidden;
    padding: 0;
    font-family: 'Open Sans', sans-serif;
}

#parallax {
    position: relative;
    width: 100%;
    height: 100vh;
    z-index: -1;
}

#parallax-text {
    position: absolute;
    width: 100%;
    height: 100vh;
    background-image: url(../imgs/Text_Main_Banner.webp);
    background-repeat: no-repeat;
    background-position: center;
    z-index: 3;
}

#parallax-hero {
    position: absolute;
    width: 100%;
    height: 100vh;
    background-image: url(../imgs/Hero_Layer_Banner.webp);
    background-repeat: no-repeat;
    background-position: center;
    z-index: 2;
}

#parallax-triangle {
    position: absolute;
    width: 100%;
    height: 100vh;
    background-image: url(../imgs/Triangle_Flare_Banner.webp);
    background-repeat: no-repeat;
    background-position: center;
    z-index: 1;
}

#parallax-background {
    position: absolute;
    width: 100%;
    height: 100vh;
    background-image: url(../imgs/super_nova_nebula_black_hole_with_neurons.webp);
    background-repeat: no-repeat;
    background-position: center;
    z-index: 0;
}

h1 {
    position: absolute;
    top: 47%;
    left: 50%;
    transform: translate(-50%, -50%);
    color: #fff;
    font-family: "Arial";
    text-transform: uppercase;
    opacity: .2;
    font-size: 70px;
}

----!@#$----
output.txt

--END--